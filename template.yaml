AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: awsdingler-serverless-api

Globals:
  Function:
    AutoPublishAlias: live
    Tracing: Active
    Environment:
      Variables:
        ENV: !Ref Environment

Parameters:
  AutoScalingGroupName:
    Type: String
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
      - local

Conditions:
  IsProdEnvironment: !Equals [!Ref Environment, prod]

Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambda/handlers.helloWorld
      Runtime: nodejs10.x
      Timeout: 10
      Layers:
        - !Ref CommonLayer
      DeploymentPreference:
        Type: !If [IsProdEnvironment, Canary10Percent5Minutes, AllAtOnce]
        Alarms:
          - !Ref HelloCanaryErrorsAlarm
      Events:
        Hello:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /hello
            Method: get

  HelloCanaryErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Lambda function canary errors
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      Dimensions:
        - Name: Resource
          Value: !Sub "${HelloWorldFunction}:live"
        - Name: FunctionName
          Value: !Ref HelloWorldFunction
        - Name: ExecutedVersion
          Value: !GetAtt HelloWorldFunction.Version.Version

  HelloIntegrationTests:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: integtests/
      Handler: hello.handler
      Timeout: 30
      Runtime: nodejs10.x
      Environment:
        Variables:
          HELLO_LAMBDA_ENDPOINT: !Sub "https://${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - codepipeline:PutJobSuccessResult
                - codepipeline:PutJobFailureResult
              Resource: "*"

  KubernetesDashboard:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambda/handlers.k8sDashboard
      Runtime: nodejs10.x
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          AUTO_SCALING_GROUP_NAME: !Ref AutoScalingGroupName
          RESULTS_S3_BUCKET: !Ref KubernetesDashboardResultsBucket
      Policies:
        - AmazonS3FullAccess
        - CloudWatchFullAccess
        - AmazonDynamoDBFullAccess
        - AmazonEC2ReadOnlyAccess
      Events:
        Cron:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)

  KubernetesDashboardResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET]
            AllowedOrigins: ['*']
            Id: myCORSRuleId1

  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: awsdingler-common
      Description: Reusable utility functions
      ContentUri: src/lambda/layers/
      CompatibleRuntimes:
        - nodejs10.x
      LicenseInfo: 'MIT-0'

  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
          title: !Sub "awsdingler-api-${Environment}"
        basePath: "/v1"
        schemes:
          - "https"
        consumes:
          - application/json
        produces:
          - application/json
        securityDefinitions:
          cognitoUserPool:
            type: apiKey
            name: "Authorization"
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
                - Fn::Sub: "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/us-west-2_IccpkvFLy"
        paths:
          /hello:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri: 
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}:live/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"

  # # # # # # # # # # # # # # # # #
  # Image processing state machine
  # # # # # # # # # # # # # # # # #
  ImagesBucket:
    Type: AWS::S3::Bucket
    Parameters:
      BucketName: !Sub ${AWS::StackName}-images-bucket

  StartImageProcessingWorkflow:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambda/handlers.startImageProcessingWorkflow
      Runtime: nodejs10.x
      Timeout: 10
      Environment:
        Variables:
          IMAGE_PROCESSING_WORKFLOW_ARN: !Ref ImageProcessingWorkflow
      DeploymentPreference:
        Type: !If [IsProdEnvironment, Canary10Percent5Minutes, AllAtOnce]
      Policies:
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt ImageProcessingWorkflow.Name
      Events:
        ImageUploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref ImagesBucket
            Events: s3:ObjectCreated:*

  ImageProcessingWorkflow:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        StateMachineName: !Sub awsdingler-image-workflow-${Environment}
        RoleArn: !GetAtt ImageWorkflowRole.Arn
        DefinitionString: !Sub |
          {
            "Comment": "A workflow that converts a JPEG/PNG into PDF and does OCR",
            "StartAt": "Validate Image",
            "States": {
              "Validate Image": {
                "Type": "Task",
                "Resource": "${ValidateImageFunction.Arn}",
                "Next": "Convert to PDF",
                "Catch": [
                  {
                    "ErrorEquals": [
                      "InvalidContentTypeException",
                      "InvalidImageSizeException"
                    ],
                    "ResultPath": "$.validateImageError",
                    "Next": "Notify Invalid Image"
                  }
                ]
              },
              "Notify Invalid Image": {
                "Type": "Pass",
                "End": true
              },
              "Convert to PDF": {
                "Type": "Task",
                "Resource": "${ImageToPdfFunction.Arn}",
                "Next": "OCR with Textract"
              },
              "OCR with Textract": {
                "Type": "Pass",
                "Next": "Save Record"
              },
              "Save Record": {
                "Type": "Task",
                "Resource": "arn:aws:states:::dynamodb:updateItem",
                "End": true,
                "Parameters": {
                  "TableName": "${ImageRecordsTable}",
                  "Key": {
                      "id": {
                          "S.$": "$.s3Key"
                      }
                  },
                  "UpdateExpression": "SET pdfS3Key = :pdfS3Key",
                  "ExpressionAttributeValues": {
                      ":pdfS3Key": {
                          "S.$": "$.imageToPdf.s3Key"
                      }
                  }
                }
              }
            }
          }

  ValidateImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambda/handlers.validateImage
      Runtime: nodejs10.x
      Timeout: 30
      Policies:
        - S3CrudPolicy:
            BucketName: !Sub ${AWS::StackName}-*
      DeploymentPreference:
        Type: !If [IsProdEnvironment, Canary10Percent5Minutes, AllAtOnce]

  ImageToPdfFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambda/handlers.imageToPdf
      Runtime: nodejs10.x
      Timeout: 30
      Policies:
        - S3CrudPolicy:
            BucketName: !Sub ${AWS::StackName}-*
      DeploymentPreference:
        Type: !If [IsProdEnvironment, Canary10Percent5Minutes, AllAtOnce]

  ImageRecordsTable:
    Type: AWS::Serverless::SimpleTable

  ImageWorkflowRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                  Principal:
                      Service: states.amazonaws.com
                  Action: sts:AssumeRole
        Path: /
        Policies:
            - PolicyName: StatesExecutionPolicy
              PolicyDocument:
                  Version: 2012-10-17
                  Statement:
                      - Effect: Allow
                        Action:
                            - lambda:InvokeFunction
                        Resource:
                            - !Sub ${ValidateImageFunction.Arn}
                            - !Sub ${ImageToPdfFunction.Arn}
            - PolicyName: DynamoDB
              PolicyDocument:
                  Version: 2012-10-17
                  Statement:
                      - Effect: Allow
                        Action:
                            - dynamodb:*
                        Resource:
                            - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ImageRecordsTable}
