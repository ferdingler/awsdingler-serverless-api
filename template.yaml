AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: awsdingler-serverless-api
Globals:
  Function:
    Timeout: 10

Parameters:
  AutoScalingGroupName:
    Type: String
  UptimeRobotUrl:
    Type: String
    Default: 'https://api.uptimerobot.com/v2'
  UptimeRobotApiKey:
    Type: String
  UptimeRobotMonitorId:
    Type: String

Resources:
  HelloFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.hello
      Runtime: nodejs8.10
      Layers:
        - !Ref AlgorithmsLayer
      AutoPublishAlias: live
      DeploymentPreference:
          Type: Canary10Percent5Minutes
          Alarms:
            - !Ref HelloCanaryErrorsAlarm
      Events:
        Hello:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /hello
            Method: get

  HelloCanaryErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Lambda function canary errors
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      Dimensions:
        - Name: Resource
          Value: !Sub "${HelloFunction}:live"
        - Name: FunctionName
          Value: !Ref HelloFunction
        - Name: ExecutedVersion
          Value: !GetAtt HelloFunction.Version.Version

  HelloIntegrationTests:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: integtests/
      Handler: hello.handler
      Runtime: nodejs8.10
      Environment:
        Variables:
          HELLO_LAMBDA_ENDPOINT: !Sub "https://${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - codepipeline:PutJobSuccessResult
                - codepipeline:PutJobFailureResult
              Resource: "*"


  KubernetesDashboard:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: cron.k8sDashboard
      Runtime: nodejs8.10
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          SPOT_TERMINATIONS_TABLE: !Ref SpotTerminationsTable
          AUTO_SCALING_GROUP_NAME: !Ref AutoScalingGroupName
          RESULTS_S3_BUCKET: !Ref KubernetesDashboardResultsBucket
          UPTIME_ROBOT_URL: !Ref UptimeRobotUrl
          UPTIME_ROBOT_API_KEY: !Ref UptimeRobotApiKey
          UPTIME_ROBOT_MONITOR_ID: !Ref UptimeRobotMonitorId
      Policies:
        - AmazonS3FullAccess
        - CloudWatchFullAccess
        - AmazonDynamoDBFullAccess
        - AmazonEC2ReadOnlyAccess
      Events:
        Cron:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)

  KubernetesSpotTerminationHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: app.spotTerminationHandler
      Runtime: nodejs8.10
      Timeout: 60
      Environment:
        Variables:
          SPOT_TERMINATIONS_TABLE: !Ref SpotTerminationsTable
      Policies:
        - AmazonDynamoDBFullAccess
        - ReadOnlyAccess
      Events:
        SpotTermination:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - "aws.ec2"
              detail-type:
                - "EC2 Spot Instance Interruption Warning"

  SpotTerminationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: "fleetId"
          KeyType: "HASH"
        - AttributeName: "timestamp"
          KeyType: "RANGE"
      AttributeDefinitions:
        - AttributeName: "fleetId"
          AttributeType: "S"
        - AttributeName: "timestamp"
          AttributeType: "S"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  KubernetesDashboardResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET]
            AllowedOrigins: ['*']
            Id: myCORSRuleId1

  AlgorithmsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: AwsDinglerAlgorithms
      Description: Reusable algorithmic functions
      ContentUri: layers/nodejs/
      CompatibleRuntimes:
        - nodejs6.10
        - nodejs8.10
      LicenseInfo: 'MIT-0'

  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
          title: "awsdingler-api"
        host: "api.awsdingler.com"
        basePath: "/v1"
        schemes:
          - "https"
        consumes:
          - application/json
        produces:
          - application/json
        securityDefinitions:
          cognitoUserPool:
            type: apiKey
            name: "Authorization"
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
                - Fn::Sub: "arn:aws:cognito-idp:us-west-2:${AWS::AccountId}:userpool/us-west-2_IccpkvFLy"
        paths:
          /hello:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri: 
                  Fn::Sub: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/${HelloFunction.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /k8s/hello:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                httpMethod: "GET"
                type: "http_proxy"
                uri: "http://a9a12520b4aa911e980ba02198db823a-ebc7c7512f5f4297.elb.us-west-2.amazonaws.com/"
                passthroughBehavior: "when_no_match"
                responses:
                  default:
                    statusCode: "200"
